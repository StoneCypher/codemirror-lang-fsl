# Simple arrow statements between atoms

a -> b;
a <- b;
a <-> b;

==>

Program(Chain, Chain, Chain)

# Simple arrow statements between strings

"a" -> "b";
"a" <- "b";
"a" <-> "b";

==>

Program(Chain, Chain, Chain)

# Simple arrow statements mixed between atoms and strings

a -> "b";
"a" -> b;
"a" -> "b";

==>

Program(Chain, Chain, Chain)

# Simple arrow statements using list spread

a -> [b c d];
[a b c] -> d;
[a b c] <-> [d e f];
a <=> [b c d] <-> e;

==>

Program(Chain, Chain, Chain, Chain)

# Simple arrow statements over various arrow types

a -> b;
a <- b;
a <-> b;
a => b;
a <= b;
a <=> b;
a ~> b;
a <~ b;
a <~> b;

==>

Program(Chain, Chain, Chain, Chain, Chain, Chain, Chain, Chain, Chain)

# Simple arrow chains

a -> b <- c <-> d;
a => b <= c <=> d;
a ~> b <~ c <~> d;
a -> b <- c <-> d => e <= f <=> g ~> h <~ i <~> j;

==>

Program(Chain, Chain, Chain, Chain)

# Left Actions

a 'foo' -> b;

==>

Program(Chain)

# Right Actions

a <- 'foo' b;

==>

Program(Chain)

# Both Actions

a 'foo' <-> 'bar' b;

==>

Program(Chain)

# Empty state claim

state foo: { };

==>

Program(StateDecl)

# Active state claim

state foo: { shape: circle; label: "bob"; };

==>

Program(StateDecl)

# Real program

machine_name: "Traffic light";

flow: down;

arrange [Green Yellow];

Off 'Enable' -> Red;
  Red 'Next' => Green 'Next' => Yellow 'Next' => Red;

[Red Yellow Green] ~> Off;

state Red    : { background-color: pink;        corners: rounded; };
state Yellow : { background-color: lightyellow; corners: rounded; };
state Green  : { background-color: lightgreen;  corners: rounded; };

state Off : {
  background-color : steelblue;
  text-color       : white;
  shape            : octagon;
  linestyle        : dashed;
};

==>

Program(

  Atom, Delim, String, Delim,
  Atom, Delim, Atom, Delim,
  Atom, Delim, Atom, Atom, Delim, Delim,

  Atom, Action, Arrow, Arrow, Delim,
    Atom, Action, Arrow, Atom, Action, Arrow, Atom, Action, Arrow, Atom, Delim,

  Delim, Atom, Atom, Atom, Delim, Arrow, Atom, Delim,

  Atom, Atom, Delim, Delim, Atom, Delim, Atom, Delim, Atom, Delim, Atom, Delim, Delim, Delim,
  Atom, Atom, Delim, Delim, Atom, Delim, Atom, Delim, Atom, Delim, Atom, Delim, Delim, Delim,
  Atom, Atom, Delim, Delim, Atom, Delim, Atom, Delim, Atom, Delim, Atom, Delim, Delim, Delim,

  Atom, Atom, Delim, Delim,
    Atom, Delim, Atom, Delim,
    Atom, Delim, Atom, Delim,
    Atom, Delim, Atom, Delim,
    Atom, Delim, Atom, Delim,
  Delim, Delim
)
